{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../ABIs/Token.json';\nimport config from '../config.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDED_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async dispatch => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNTS_LOADED',\n    account\n  });\n  return account;\n};\nexport const loadToken = async (provider, address, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(address, TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};","map":{"version":3,"names":["ethers","TOKEN_ABI","config","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","loadToken","address","token","symbol","Contract"],"sources":["/mnt/c/pr0/blockchain-developer-bootcamp/src/store/interactions.js"],"sourcesContent":["import { ethers} from 'ethers'\r\nimport TOKEN_ABI from '../ABIs/Token.json'\r\nimport config from '../config.json'\r\n\r\nexport const loadProvider = (dispatch) => {\r\n\tconst connection = new ethers.providers.Web3Provider(window.ethereum)\r\n    dispatch({type: 'PROVIDED_LOADED', connection })\r\n\r\n    return connection\r\n}\r\n\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n\tconst { chainId } = await provider.getNetwork()\r\n    dispatch({type: 'NETWORK_LOADED', chainId })\r\n    return chainId\r\n}\r\n\r\nexport const loadAccount = async (dispatch) => {\r\n\tconst accounts = await window.ethereum.request({method: 'eth_requestAccounts'})\r\n    const account = ethers.utils.getAddress(accounts[0])\r\n\r\n    dispatch({type: 'ACCOUNTS_LOADED', account })\r\n    return account\r\n}\r\n\r\n\r\nexport const loadToken = async (provider, address, dispatch) => {\r\n\tlet token, symbol\r\n\r\n\ttoken = new ethers.Contract(address, TOKEN_ABI, provider)\r\n    symbol = await token.symbol()\r\n\r\n    dispatch({type: 'TOKEN_LOADED', token, symbol })\r\n    return token\r\n}"],"mappings":"AAAA,SAASA,MAAT,QAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;EACzC,MAAMC,UAAU,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAnB;EACGL,QAAQ,CAAC;IAACM,IAAI,EAAE,iBAAP;IAA0BL;EAA1B,CAAD,CAAR;EAEA,OAAOA,UAAP;AACH,CALM;AAOP,OAAO,MAAMM,WAAW,GAAG,OAAOC,QAAP,EAAiBR,QAAjB,KAA8B;EACxD,MAAM;IAAES;EAAF,IAAc,MAAMD,QAAQ,CAACE,UAAT,EAA1B;EACGV,QAAQ,CAAC;IAACM,IAAI,EAAE,gBAAP;IAAyBG;EAAzB,CAAD,CAAR;EACA,OAAOA,OAAP;AACH,CAJM;AAMP,OAAO,MAAME,WAAW,GAAG,MAAOX,QAAP,IAAoB;EAC9C,MAAMY,QAAQ,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBQ,OAAhB,CAAwB;IAACC,MAAM,EAAE;EAAT,CAAxB,CAAvB;EACG,MAAMC,OAAO,GAAGnB,MAAM,CAACoB,KAAP,CAAaC,UAAb,CAAwBL,QAAQ,CAAC,CAAD,CAAhC,CAAhB;EAEAZ,QAAQ,CAAC;IAACM,IAAI,EAAE,iBAAP;IAA0BS;EAA1B,CAAD,CAAR;EACA,OAAOA,OAAP;AACH,CANM;AASP,OAAO,MAAMG,SAAS,GAAG,OAAOV,QAAP,EAAiBW,OAAjB,EAA0BnB,QAA1B,KAAuC;EAC/D,IAAIoB,KAAJ,EAAWC,MAAX;EAEAD,KAAK,GAAG,IAAIxB,MAAM,CAAC0B,QAAX,CAAoBH,OAApB,EAA6BtB,SAA7B,EAAwCW,QAAxC,CAAR;EACGa,MAAM,GAAG,MAAMD,KAAK,CAACC,MAAN,EAAf;EAEArB,QAAQ,CAAC;IAACM,IAAI,EAAE,cAAP;IAAuBc,KAAvB;IAA8BC;EAA9B,CAAD,CAAR;EACA,OAAOD,KAAP;AACH,CARM"},"metadata":{},"sourceType":"module"}