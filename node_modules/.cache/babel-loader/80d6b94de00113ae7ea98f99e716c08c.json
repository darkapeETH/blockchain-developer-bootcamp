{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../ABIs/Token.json';\nimport EXCHANGE_ABI from '../ABIs/Exchange.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDER_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async (provider, dispatch) => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNT_LOADED',\n    account\n  });\n  let balance = await provider.getBalance(account);\n  balance = ethers.utils.formatEther(balance);\n  dispatch({\n    type: 'ETHER_BALANCE_LOADED',\n    balance\n  });\n  return account;\n};\nexport const loadTokens = async (provider, addresses, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_1_LOADED',\n    token,\n    symbol\n  });\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_2_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};\nexport const loadExchange = async (provider, address, dispatch) => {\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\n  dispatch({\n    type: 'EXCHANGE_LOADED',\n    exchange\n  });\n  return exchange;\n};\nexport const subscribeToEvents = (exchange, dispatch) => {\n  exchange.on('Deposit', (token, user, amount, balance, event) => {\n    dispatch({\n      type: 'TRANSFER_SUCCESS',\n      event\n    });\n  });\n  exchange.on('Withdraw', (token, user, amount, balance, event) => {\n    dispatch({\n      type: 'TRANSFER_SUCCESS',\n      event\n    });\n  });\n  exchange.on('Order', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\n    const order = event.args;\n    dispatch({\n      type: 'NEW_ORDER_SUCCESS',\n      order,\n      event\n    });\n  });\n};\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\n  let balance = ethers.utils.formatEther(await tokens[0].balanceOf(account), 18);\n  dispatch({\n    type: 'TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[0].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await tokens[1].balanceOf(account), 18);\n  dispatch({\n    type: 'TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n};\nexport const transferTokens = async (provider, exchange, transferType, token, amount, dispatch) => {\n  let transaction;\n  dispatch({\n    type: 'TRANSFER_REQUEST'\n  });\n\n  try {\n    const signer = await provider.getSigner();\n    const amountToTransfer = ethers.utils.parseUnits(amount.toString(), 18);\n\n    if (transferType === 'Deposit') {\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer);\n      await transaction.wait();\n      transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer);\n      await transaction.wait();\n    } else {\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer);\n      await transaction.wait();\n      transaction = await exchange.connect(signer).withdrawToken(token.address, amountToTransfer);\n      await transaction.wait();\n    }\n  } catch (error) {\n    dispatch({\n      type: 'TRANSFER_FAIL'\n    });\n  }\n};\nexport const makeBuyOrder = async (provider, exchange, tokens, order, dispatch) => {\n  const tokenGet = tokens[0].address;\n  const amountGet = ethers.utils.parseUnits(order.amount, 18);\n  const tokenGive = tokens[1].address;\n  const amountGive = ethers.utils.parseUnits((order.amount * order.price).toString(), 18);\n  dispatch({\n    type: 'NEW_ORDER_REQUEST'\n  });\n\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'NEW_ORDER_FAIL'\n    });\n  }\n};\nexport const makeSellOrder = async (provider, exchange, tokens, order, dispatch) => {\n  const tokenGet = tokens[1].address;\n  const amountGet = ethers.utils.parseUnits((order.amount * order.price).toString(), 18);\n  const tokenGive = tokens[0].address;\n  const amountGive = ethers.utils.parseUnits(order.amount, 18);\n  dispatch({\n    type: 'NEW_ORDER_REQUEST'\n  });\n\n  try {\n    const signer = await provider.getSigner();\n    const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive);\n    await transaction.wait();\n  } catch (error) {\n    dispatch({\n      type: 'NEW_ORDER_FAIL'\n    });\n  }\n}; //Load all orders\n\nexport const LoadAllOrders = async (provider, exchange, dispatch) => {\n  const block = await provider.getBlockNumber(); //Fetch all orders\n\n  const orderStream = await exchange.queryFilter('Order', 0, block);\n  const allOrders = orderStream.map(event => event.args);\n  dispatch({\n    type: 'ALL_ORDERS_LOADED',\n    allOrders\n  });\n};\n_c = LoadAllOrders;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadAllOrders\");","map":{"version":3,"names":["ethers","TOKEN_ABI","EXCHANGE_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","balance","getBalance","formatEther","loadTokens","addresses","token","symbol","Contract","loadExchange","address","exchange","subscribeToEvents","on","user","amount","event","id","tokenGet","amountGet","tokenGive","amountGive","timestamp","order","args","loadBalances","tokens","balanceOf","transferTokens","transferType","transaction","signer","getSigner","amountToTransfer","parseUnits","toString","connect","approve","wait","depositToken","withdrawToken","error","makeBuyOrder","price","makeOrder","makeSellOrder","LoadAllOrders","block","getBlockNumber","orderStream","queryFilter","allOrders","map"],"sources":["/mnt/c/pr0/blockchain-developer-bootcamp/src/store/interactions.js"],"sourcesContent":["import { ethers } from 'ethers'\r\nimport TOKEN_ABI from '../ABIs/Token.json';\r\nimport EXCHANGE_ABI from '../ABIs/Exchange.json';\r\n\r\nexport const loadProvider = (dispatch) => {\r\n  const connection = new ethers.providers.Web3Provider(window.ethereum)\r\n  dispatch({ type: 'PROVIDER_LOADED', connection })\r\n\r\n  return connection\r\n}\r\n\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  const { chainId } = await provider.getNetwork()\r\n  dispatch({ type: 'NETWORK_LOADED', chainId })\r\n\r\n  return chainId\r\n}\r\n\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n  const account = ethers.utils.getAddress(accounts[0])\r\n\r\n  dispatch({ type: 'ACCOUNT_LOADED', account })\r\n\r\n  let balance = await provider.getBalance(account)\r\n  balance = ethers.utils.formatEther(balance)\r\n\r\n  dispatch({ type: 'ETHER_BALANCE_LOADED', balance })\r\n\r\n  return account\r\n}\r\n\r\nexport const loadTokens = async (provider, addresses, dispatch) => {\r\n  let token, symbol\r\n\r\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_1_LOADED', token, symbol })\r\n\r\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_2_LOADED', token, symbol })\r\n\r\n  return token\r\n}\r\n\r\nexport const loadExchange = async (provider, address, dispatch) => {\r\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\r\n  dispatch({ type: 'EXCHANGE_LOADED', exchange })\r\n\r\n  return exchange\r\n}\r\n\r\nexport const subscribeToEvents = (exchange, dispatch) => {\r\n  exchange.on('Deposit', (token, user, amount, balance, event) => {\r\n    dispatch({ type: 'TRANSFER_SUCCESS', event })\r\n  })\r\n  exchange.on('Withdraw', (token, user, amount, balance, event) => {\r\n    dispatch({ type: 'TRANSFER_SUCCESS', event })\r\n  })\r\n  exchange.on('Order', (id, user, tokenGet, amountGet, tokenGive, amountGive, timestamp, event) => {\r\n    const order = event.args\r\n    dispatch({ type: 'NEW_ORDER_SUCCESS', order, event })\r\n  })\r\n}\r\n\r\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\r\n\r\n  let balance = ethers.utils.formatEther(await tokens[0].balanceOf(account),18)\r\n  dispatch({ type: 'TOKEN_1_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[0].address, account),18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED', balance})\r\n\r\n  balance = ethers.utils.formatEther(await tokens[1].balanceOf(account),18)\r\n  dispatch({ type: 'TOKEN_2_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account),18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED', balance})\r\n}\r\n\r\nexport const transferTokens = async (provider, exchange, transferType, token, amount, dispatch) => {\r\n  let transaction\r\n  dispatch({type: 'TRANSFER_REQUEST'})\r\n\r\n  try {\r\n    const signer = await provider.getSigner()\r\n    const amountToTransfer = ethers.utils.parseUnits(amount.toString(),18)\r\n\r\n    if (transferType === 'Deposit') {\r\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer)\r\n      await transaction.wait()\r\n      transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer)\r\n      await transaction.wait()      \r\n    } else {\r\n      transaction = await token.connect(signer).approve(exchange.address, amountToTransfer)\r\n      await transaction.wait()\r\n      transaction = await exchange.connect(signer).withdrawToken(token.address, amountToTransfer)\r\n      await transaction.wait()\r\n    }\r\n  } catch(error) {\r\n    dispatch({ type: 'TRANSFER_FAIL'})\r\n  }\r\n\r\n}\r\n\r\nexport const makeBuyOrder = async (provider, exchange, tokens, order, dispatch) => {\r\n\r\n  const tokenGet = tokens[0].address\r\n  const amountGet = ethers.utils.parseUnits(order.amount,18)\r\n  const tokenGive = tokens[1].address  \r\n  const amountGive = ethers.utils.parseUnits((order.amount * order.price).toString(),18)\r\n  dispatch({type: 'NEW_ORDER_REQUEST' })\r\n\r\n  try {\r\n  const signer = await provider.getSigner()\r\n  const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive)\r\n  await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({type: 'NEW_ORDER_FAIL' })\r\n  }\r\n}\r\n\r\nexport const makeSellOrder = async (provider, exchange, tokens, order, dispatch) => {\r\n\r\n  const tokenGet = tokens[1].address\r\n  const amountGet = ethers.utils.parseUnits((order.amount * order.price).toString(),18)\r\n  const tokenGive = tokens[0].address  \r\n  const amountGive = ethers.utils.parseUnits(order.amount,18)\r\n  dispatch({type: 'NEW_ORDER_REQUEST' })\r\n\r\n  try {\r\n  const signer = await provider.getSigner()\r\n  const transaction = await exchange.connect(signer).makeOrder(tokenGet, amountGet, tokenGive, amountGive)\r\n  await transaction.wait()\r\n  } catch (error) {\r\n    dispatch({type: 'NEW_ORDER_FAIL' })\r\n  }\r\n}\r\n\r\n//Load all orders\r\nexport const LoadAllOrders = async (provider, exchange, dispatch) => {\r\n  const block = await provider.getBlockNumber()\r\n  //Fetch all orders\r\n  const orderStream = await exchange.queryFilter('Order', 0, block)\r\n  const allOrders = orderStream.map(event => event.args)\r\n\r\n  dispatch({type: 'ALL_ORDERS_LOADED', allOrders })\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}