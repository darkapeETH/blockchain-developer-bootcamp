{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../ABIs/Token.json';\nimport EXCHANGE_ABI from '../ABIs/Exchange.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDER_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async (provider, dispatch) => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNT_LOADED',\n    account\n  });\n  let balance = await provider.getBalance(account);\n  balance = ethers.utils.formatEther(balance);\n  dispatch({\n    type: 'ETHER_BALANCE_LOADED',\n    balance\n  });\n  return account;\n};\nexport const loadTokens = async (provider, addresses, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_1_LOADED',\n    token,\n    symbol\n  });\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_2_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};\nexport const loadExchange = async (provider, address, dispatch) => {\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\n  dispatch({\n    type: 'EXCHANGE_LOADED',\n    exchange\n  });\n  return exchange;\n};\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.on('Deposit', (token, user, amount, balance, event, dispatch) => {\n    //step4 notify app that transfer was successful\n    dispatch({\n      type: 'TRANSFER_SUCCESS',\n      event\n    });\n  });\n};\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\n  let balance = ethers.utils.formatEther(await tokens[0].balanceOf(account), 18);\n  dispatch({\n    type: 'TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[0].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account), 18);\n  dispatch({\n    type: 'TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account), 18);\n  dispatch({\n    type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED',\n    balance\n  });\n};\nexport const transferTokens = async (provider, exchange, transferType, token, amount, dispatch) => {\n  let transaction;\n  dispatch({\n    type: 'TRANSFER_REQUEST'\n  });\n  const signer = await provider.getSigner();\n  const amountToTransfer = ethers.utils.parseUnits(amount.toString(), 18);\n  transaction = await token.connect(signer).approve(exchange.address, amountToTransfer);\n  await transaction.wait();\n  transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer);\n  await transaction.wait();\n};","map":{"version":3,"names":["ethers","TOKEN_ABI","EXCHANGE_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","balance","getBalance","formatEther","loadTokens","addresses","token","symbol","Contract","loadExchange","address","exchange","subscribeToEvents","on","user","amount","event","loadBalances","tokens","balanceOf","transferTokens","transferType","transaction","signer","getSigner","amountToTransfer","parseUnits","toString","connect","approve","wait","depositToken"],"sources":["/mnt/c/pr0/blockchain-developer-bootcamp/src/store/interactions.js"],"sourcesContent":["import { ethers } from 'ethers'\r\nimport TOKEN_ABI from '../ABIs/Token.json';\r\nimport EXCHANGE_ABI from '../ABIs/Exchange.json';\r\n\r\nexport const loadProvider = (dispatch) => {\r\n  const connection = new ethers.providers.Web3Provider(window.ethereum)\r\n  dispatch({ type: 'PROVIDER_LOADED', connection })\r\n\r\n  return connection\r\n}\r\n\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  const { chainId } = await provider.getNetwork()\r\n  dispatch({ type: 'NETWORK_LOADED', chainId })\r\n\r\n  return chainId\r\n}\r\n\r\nexport const loadAccount = async (provider, dispatch) => {\r\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n  const account = ethers.utils.getAddress(accounts[0])\r\n\r\n  dispatch({ type: 'ACCOUNT_LOADED', account })\r\n\r\n  let balance = await provider.getBalance(account)\r\n  balance = ethers.utils.formatEther(balance)\r\n\r\n  dispatch({ type: 'ETHER_BALANCE_LOADED', balance })\r\n\r\n  return account\r\n}\r\n\r\nexport const loadTokens = async (provider, addresses, dispatch) => {\r\n  let token, symbol\r\n\r\n  token = new ethers.Contract(addresses[0], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_1_LOADED', token, symbol })\r\n\r\n  token = new ethers.Contract(addresses[1], TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_2_LOADED', token, symbol })\r\n\r\n  return token\r\n}\r\n\r\nexport const loadExchange = async (provider, address, dispatch) => {\r\n  const exchange = new ethers.Contract(address, EXCHANGE_ABI, provider);\r\n  dispatch({ type: 'EXCHANGE_LOADED', exchange })\r\n\r\n  return exchange\r\n}\r\n\r\nexport const subscribeToEvents = async (exchange,dispatch) => {\r\n  exchange.on('Deposit', (token, user, amount, balance, event, dispatch) => {\r\n      //step4 notify app that transfer was successful\r\n      dispatch({ type: 'TRANSFER_SUCCESS', event })\r\n  })\r\n\r\n}\r\n\r\n\r\nexport const loadBalances = async (exchange, tokens, account, dispatch) => {\r\n\r\n  let balance = ethers.utils.formatEther(await tokens[0].balanceOf(account),18)\r\n  dispatch({ type: 'TOKEN_1_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[0].address, account),18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_1_BALANCE_LOADED', balance})\r\n\r\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account),18)\r\n  dispatch({ type: 'TOKEN_2_BALANCE_LOADED', balance })\r\n\r\n  balance = ethers.utils.formatEther(await exchange.balanceOf(tokens[1].address, account),18)\r\n  dispatch({ type: 'EXCHANGE_TOKEN_2_BALANCE_LOADED', balance})\r\n}\r\n\r\n\r\nexport const transferTokens = async (provider, exchange, transferType, token, amount, dispatch) => {\r\n  let transaction\r\n  dispatch({type: 'TRANSFER_REQUEST'})\r\n\r\n  const signer = await provider.getSigner()\r\n  const amountToTransfer = ethers.utils.parseUnits(amount.toString(),18)\r\n\r\n  transaction = await token.connect(signer).approve(exchange.address, amountToTransfer)\r\n  await transaction.wait()\r\n  transaction = await exchange.connect(signer).depositToken(token.address, amountToTransfer)\r\n\r\n  await transaction.wait()\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}