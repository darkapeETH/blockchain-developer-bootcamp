{"ast":null,"code":"export const provider = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'PROVIDER_LOADED':\n      return {\n        ...state,\n        connection: action.connection\n      };\n    case 'NETWORK_LOADED':\n      return {\n        ...state,\n        chainId: action.chainId\n      };\n    case 'ACCOUNT_LOADED':\n      return {\n        ...state,\n        account: action.account\n      };\n    case 'ETHER_BALANCE_LOADED':\n      return {\n        ...state,\n        balance: action.balance\n      };\n    default:\n      return state;\n  }\n};\nexport const tokens = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    loaded: false,\n    contracts: [],\n    symbols: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'TOKEN_1_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contracts: [action.token],\n        symbols: [action.symbol]\n      };\n    case 'TOKEN_1_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [action.balance]\n      };\n    case 'TOKEN_2_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contracts: [...state.contracts, action.token],\n        symbols: [...state.symbols, action.symbol]\n      };\n    case 'TOKEN_2_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [...state.balances, action.balance]\n      };\n    default:\n      return state;\n  }\n};\nconst DEFAULT_EXCHANGE_STATE = {\n  loaded: false,\n  contract: {},\n  transaction: {\n    isSuccessful: false\n  },\n  events: [],\n  allOrders: {\n    loaded: false,\n    data: []\n  }\n};\nexport const exchange = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_EXCHANGE_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let index, data;\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return {\n        ...state,\n        loaded: true,\n        contract: action.exchange\n      };\n    case 'CANCELLED_ORDERS_LOADED':\n      return {\n        ...state,\n        cancelledOrders: {\n          loaded: true,\n          data: action.cancelledOrders\n        }\n      };\n    case 'ALL_ORDERS_LOADED':\n      return {\n        ...state,\n        allOrders: {\n          loaded: true,\n          data: action.allOrders\n        }\n      };\n    case 'EXCHANGE_TOKEN_1_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [action.balance]\n      };\n    case 'EXCHANGE_TOKEN_2_BALANCE_LOADED':\n      return {\n        ...state,\n        balances: [...state.balances, action.balance]\n      };\n    case 'TRANSFER_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: true,\n          isSuccessful: false\n        },\n        transferInProgress: true\n      };\n    case 'TRANSFER_SUCCESS':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: false,\n          isSuccessful: true\n        },\n        transferInProgress: false,\n        events: [action.event, ...state.events]\n      };\n    case 'TRANSFER_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Transfer',\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        },\n        transferInProgress: false\n      };\n    case 'NEW_ORDER_REQUEST':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'New Order',\n          isPending: true,\n          isSuccessful: false\n        }\n      };\n    case 'NEW_ORDER_SUCCESS':\n      //prevent duplicate orders\n      index = state.allOrders.data.findIndex(order => order.id.toString() === action.order.id.toString());\n      if (index === -1) {\n        // The findIndex method returns the index of the first element in the array that satisfies the provided condition. If no element satisfies the condition, the findIndex method returns -1 to indicate that the element was not found.\n        data = [...state.allOrders.data, action.order];\n      } else {\n        data = state.allOrders.data;\n      }\n      return {\n        ...state,\n        allOrders: {\n          ...state.allOrders,\n          data\n        },\n        transaction: {\n          transactionType: 'New Order',\n          isPending: false,\n          isSuccessful: true\n        },\n        events: [action.event, ...state.events]\n      };\n    case 'NEW_ORDER_FAIL':\n      return {\n        ...state,\n        transaction: {\n          transactionType: 'Failed Order',\n          isPending: false,\n          isSuccessful: false,\n          isError: true\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["provider","state","arguments","length","undefined","action","type","connection","chainId","account","balance","tokens","loaded","contracts","symbols","token","symbol","balances","DEFAULT_EXCHANGE_STATE","contract","transaction","isSuccessful","events","allOrders","data","exchange","index","cancelledOrders","transactionType","isPending","transferInProgress","event","isError","findIndex","order","id","toString"],"sources":["/mnt/c/pr0/blockchain-developer-bootcamp/src/store/reducers.js"],"sourcesContent":["export const provider = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'PROVIDER_LOADED':\r\n      return {\r\n        ...state,\r\n        connection: action.connection\r\n      }\r\n    case 'NETWORK_LOADED':\r\n      return {\r\n        ...state,\r\n        chainId: action.chainId\r\n      }\r\n    case 'ACCOUNT_LOADED':\r\n      return {\r\n        ...state,\r\n        account: action.account\r\n      }\r\n    case 'ETHER_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balance: action.balance\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const tokens = (state = {loaded: false, contracts: [], symbols: []}, action) => {\r\n  switch (action.type) {\r\n    case 'TOKEN_1_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contracts: [action.token],\r\n        symbols: [action.symbol]\r\n      }\r\n    case 'TOKEN_1_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [action.balance]\r\n      }\r\n    case 'TOKEN_2_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contracts: [...state.contracts, action.token],\r\n        symbols: [...state.symbols, action.symbol]\r\n      }\r\n    case 'TOKEN_2_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [...state.balances, action.balance]\r\n      }\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst DEFAULT_EXCHANGE_STATE = {\r\n  loaded: false,\r\n  contract: {},\r\n  transaction: {isSuccessful: false},\r\n  events: [],\r\n  allOrders: {\r\n    loaded: false,\r\n    data: []}\r\n}\r\n\r\nexport const exchange = (state = DEFAULT_EXCHANGE_STATE, action) => {\r\n  let index, data\r\n\r\n  switch (action.type) {\r\n    case 'EXCHANGE_LOADED':\r\n      return {\r\n        ...state,\r\n        loaded: true,\r\n        contract: action.exchange\r\n      }\r\n\r\n    case 'CANCELLED_ORDERS_LOADED':\r\n      return {\r\n        ...state,\r\n        cancelledOrders: {\r\n          loaded: true,\r\n          data: action.cancelledOrders\r\n        }\r\n      }\r\n\r\n    case 'ALL_ORDERS_LOADED':\r\n      return {\r\n        ...state,\r\n        allOrders: {\r\n          loaded: true,\r\n          data: action.allOrders\r\n        }\r\n      }\r\n\r\n    case 'EXCHANGE_TOKEN_1_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [action.balance]\r\n      }\r\n    case 'EXCHANGE_TOKEN_2_BALANCE_LOADED':\r\n      return {\r\n        ...state,\r\n        balances: [...state.balances, action.balance]\r\n      }\r\n\r\n\r\n    case 'TRANSFER_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: true,\r\n          isSuccessful: false\r\n        },\r\n        transferInProgress: true\r\n      }\r\n\r\n    case 'TRANSFER_SUCCESS':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: false,\r\n          isSuccessful: true\r\n        },\r\n        transferInProgress: false,\r\n        events: [action.event, ...state.events]\r\n      }\r\n\r\n    case 'TRANSFER_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Transfer',\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        },\r\n        transferInProgress: false,\r\n      }\r\n\r\n    case 'NEW_ORDER_REQUEST':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'New Order',\r\n          isPending: true,\r\n          isSuccessful: false\r\n        }\r\n      }\r\n\r\n    case 'NEW_ORDER_SUCCESS':\r\n      //prevent duplicate orders\r\n      index = state.allOrders.data.findIndex(order => order.id.toString() === action.order.id.toString())\r\n      if(index === -1) { // The findIndex method returns the index of the first element in the array that satisfies the provided condition. If no element satisfies the condition, the findIndex method returns -1 to indicate that the element was not found.\r\n          data = [...state.allOrders.data, action.order]\r\n        } else {\r\n          data = state.allOrders.data\r\n        }\r\n\r\n      return {\r\n        ...state,\r\n        allOrders:{\r\n          ...state.allOrders,\r\n          data\r\n        },\r\n        transaction: {\r\n          transactionType: 'New Order',\r\n          isPending: false,\r\n          isSuccessful: true,\r\n        },\r\n        events: [action.event, ...state.events]\r\n      }\r\n\r\n    case 'NEW_ORDER_FAIL':\r\n      return {\r\n        ...state,\r\n        transaction: {\r\n          transactionType: 'Failed Order',\r\n          isPending: false,\r\n          isSuccessful: false,\r\n          isError: true\r\n        }\r\n      }\r\n\r\n\r\n\r\n  default:\r\n    return state\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}