{"ast":null,"code":"import { ethers } from 'ethers';\nimport TOKEN_ABI from '../ABIs/Token.json';\nexport const loadProvider = dispatch => {\n  const connection = new ethers.providers.Web3Provider(window.ethereum);\n  dispatch({\n    type: 'PROVIDER_LOADED',\n    connection\n  });\n  return connection;\n};\nexport const loadNetwork = async (provider, dispatch) => {\n  const {\n    chainId\n  } = await provider.getNetwork();\n  dispatch({\n    type: 'NETWORK_LOADED',\n    chainId\n  });\n  return chainId;\n};\nexport const loadAccount = async dispatch => {\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  const account = ethers.utils.getAddress(accounts[0]);\n  dispatch({\n    type: 'ACCOUNT_LOADED',\n    account\n  });\n  return account;\n};\nexport const loadToken = async (provider, address, dispatch) => {\n  let token, symbol;\n  token = new ethers.Contract(address, TOKEN_ABI, provider);\n  symbol = await token.symbol();\n  dispatch({\n    type: 'TOKEN_LOADED',\n    token,\n    symbol\n  });\n  return token;\n};","map":{"version":3,"names":["ethers","TOKEN_ABI","loadProvider","dispatch","connection","providers","Web3Provider","window","ethereum","type","loadNetwork","provider","chainId","getNetwork","loadAccount","accounts","request","method","account","utils","getAddress","loadToken","address","token","symbol","Contract"],"sources":["/mnt/c/pr0/blockchain-developer-bootcamp/src/store/interactions.js"],"sourcesContent":["import { ethers } from 'ethers'\r\nimport TOKEN_ABI from '../ABIs/Token.json'\r\n\r\nexport const loadProvider = (dispatch) => {\r\n  const connection = new ethers.providers.Web3Provider(window.ethereum)\r\n  dispatch({ type: 'PROVIDER_LOADED', connection })\r\n\r\n  return connection\r\n}\r\n\r\nexport const loadNetwork = async (provider, dispatch) => {\r\n  const { chainId } = await provider.getNetwork()\r\n  dispatch({ type: 'NETWORK_LOADED', chainId })\r\n\r\n  return chainId\r\n}\r\n\r\nexport const loadAccount = async (dispatch) => {\r\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n  const account = ethers.utils.getAddress(accounts[0])\r\n\r\n  dispatch({ type: 'ACCOUNT_LOADED', account })\r\n\r\n  return account\r\n}\r\n\r\n\r\nexport const loadToken = async (provider, address, dispatch) => {\r\n  let token, symbol\r\n\r\n  token = new ethers.Contract(address, TOKEN_ABI, provider)\r\n  symbol = await token.symbol()\r\n  dispatch({ type: 'TOKEN_LOADED', token, symbol })\r\n\r\n  return token\r\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;EACxC,MAAMC,UAAU,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAnB;EACAL,QAAQ,CAAC;IAAEM,IAAI,EAAE,iBAAR;IAA2BL;EAA3B,CAAD,CAAR;EAEA,OAAOA,UAAP;AACD,CALM;AAOP,OAAO,MAAMM,WAAW,GAAG,OAAOC,QAAP,EAAiBR,QAAjB,KAA8B;EACvD,MAAM;IAAES;EAAF,IAAc,MAAMD,QAAQ,CAACE,UAAT,EAA1B;EACAV,QAAQ,CAAC;IAAEM,IAAI,EAAE,gBAAR;IAA0BG;EAA1B,CAAD,CAAR;EAEA,OAAOA,OAAP;AACD,CALM;AAOP,OAAO,MAAME,WAAW,GAAG,MAAOX,QAAP,IAAoB;EAC7C,MAAMY,QAAQ,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBQ,OAAhB,CAAwB;IAAEC,MAAM,EAAE;EAAV,CAAxB,CAAvB;EACA,MAAMC,OAAO,GAAGlB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwBL,QAAQ,CAAC,CAAD,CAAhC,CAAhB;EAEAZ,QAAQ,CAAC;IAAEM,IAAI,EAAE,gBAAR;IAA0BS;EAA1B,CAAD,CAAR;EAEA,OAAOA,OAAP;AACD,CAPM;AAUP,OAAO,MAAMG,SAAS,GAAG,OAAOV,QAAP,EAAiBW,OAAjB,EAA0BnB,QAA1B,KAAuC;EAC9D,IAAIoB,KAAJ,EAAWC,MAAX;EAEAD,KAAK,GAAG,IAAIvB,MAAM,CAACyB,QAAX,CAAoBH,OAApB,EAA6BrB,SAA7B,EAAwCU,QAAxC,CAAR;EACAa,MAAM,GAAG,MAAMD,KAAK,CAACC,MAAN,EAAf;EACArB,QAAQ,CAAC;IAAEM,IAAI,EAAE,cAAR;IAAwBc,KAAxB;IAA+BC;EAA/B,CAAD,CAAR;EAEA,OAAOD,KAAP;AACD,CARM"},"metadata":{},"sourceType":"module"}